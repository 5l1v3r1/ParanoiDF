{"name":"Paranoidf","tagline":"ParanoiDF - PDF Analysis Suite based on PeePDF by Jose Miguel Esparza (http://peepdf.eternal-todo.com/). Tools added: Password cracking, redaction recovery, DRM removal, malicious JavaScript extraction, and more.","body":"ParanoiDF\r\n=========\r\n\r\nThe swiss army knife of PDF Analysis Tools. Based on peepdf - http://peepdf.eternal-todo.com. This README builds on the peepdf README.\r\n\r\n![](http://i16.photobucket.com/albums/b37/psynto/1-1.jpg)\r\n\r\nHome Page \r\n-----------\r\n\r\n* https://github.com/patrickdw123/ParanoiDF\r\n* patrickdw123(at)gmail(dot)com\r\n* http://uk.linkedin.com/pub/patrick-wragg/8a/a7a/324/\r\n\r\nFeatures\r\n-----------\r\n\r\nSee https://github.com/patrickdw123/ParanoiDF/wiki.\r\n\r\nDependancies\r\n-----------\r\n\r\n* In order to crack passwords: \r\n\t- PdfCrack needed (apt-get install pdfcrack)\r\n* In order to remove DRM (editing, copying Etc.): \r\n\t- Calibre's ebook-convert needed (apt-get install calibre)\r\n* In order to decrypt PDFs: \r\n\t- qpdf needed (apt-get install qpdf)\r\n* In order to use the command redact:\r\n\t- NLTK (Natural Language ToolKit) needed (apt-get install python-nltk)\r\n\t- Java (Stanford parser is written in Java) needed (apt-get install default-jre)\r\n* To support XML output \"lxml\" is needed:\r\n   - http://lxml.de/installation.html\r\n* Included modules: lzw, colorama, jsbeautifier, ccitt, pythonaes (Thanks to all the developers!!)\r\n\r\nInstallation\r\n-----------\r\n\r\nNo installation is needed apart of the commented dependencies, just execute:\r\n\r\n\tpython paranoiDF.py\r\n\r\nExecution\r\n-----------\r\n\r\nThere are two important options when ParanoidF is executed:\r\n\r\n-f: Ignores the parsing errors. Analysing malicious files propably leads to parsing errors, so this parameter should be set.\r\n-l: Sets the loose mode, so does not search for the endobj tag because it's not obligatory. Helpful with malformed files.\r\n\r\n\r\n* Simple execution\r\n\r\nShows the statistics of the file after being decoded/decrypted and analysed:\r\n\r\n    python paranoiDF.py [options] pdf_file\r\n\r\n\r\n* Interactive console\r\n\r\nExecutes the interactive console, giving a wide range of tools to play with.\r\n\r\n    python paranoiDF.py -i \r\n\r\n\r\n* Batch execution\r\n\r\nIt's possible to use a commands file to specify the commands to be executed in the batch mode. This type of execution is good to automatise analysis of several files:\r\n\r\n    python paranoiDF.py [options] -s script_file \r\n\r\nSome Hints\r\n-----------\r\nIf the information shown when a PDF file is parsed is not enough to know if it's harmful or not, the following commands can help to do it:\r\n\r\n* tree\r\n\r\nShows the tree graph of the file or specified version. Here we can see suspicious elements.\r\n\r\n\r\n* offsets \r\n\r\nShows the physical map of the file or the specified version of the document. This is helpful to see unusual big objects or big spaces between objects.\r\n\r\n\r\n* search\r\n\r\nSearch the specified string or hexadecimal string in the objects (decoded and encrypted streams included).\r\n\r\n\r\n* object/rawobject\r\n\r\nShows the (raw) content of the object.\r\n\r\n\r\n* stream/rawstream\r\n\r\nShows the (raw) content of the stream.\r\n\r\nTODO\r\n----------\r\n* Refine and test redaction thresholds.\r\n* Add automation of retrieval of redaction box information such as font size, font and redaction box coordinates.\r\n* Add a GUI.\r\n* Add other encryption algorithms (such as the AES).\r\n* Digital Signatures analysis.\r\n\r\n\r\n\r\nBugs\r\n----------\r\n\r\nFeel free to send bugs/criticisms/praises/comments to patrickdw123(at)gmail(dot)com.\r\n","google":"UA-53766717-1","note":"Don't delete this file! It's used internally to help with page regeneration."}